1
00:00:16,900 --> 00:00:20,920
Вы готовы изучить програмирование и Unreal Engine 5.

2
00:00:20,950 --> 00:00:27,250
В этом курсе я покажу, как новичку создать свой собственный игровой проект с открытым миром

3
00:00:27,250 --> 00:00:33,320
В жанре экшен RPG с механикой сражений, противниками

4
00:00:33,340 --> 00:00:39,850
золотом, получением опыта в виде очков душ погибших противников, нанесение урона и смерть, 

5
00:00:39,850 --> 00:00:40,630
все это будет сделано с нуля.

6
00:00:40,660 --> 00:00:46,090
Мы начнем изучение UE5 с основ ориентирования и перемещения в вьпорте 

7
00:00:46,090 --> 00:00:46,870
и научимся перемещать и изменять объекты.

8
00:00:46,870 --> 00:00:53,230
Хорошо, теперь создадим новый проект с открытым миром, добавим освещение, небо  и посмотрим

9
00:00:53,230 --> 00:00:54,310
как эти вещи взаимодействуют друг с другом.

10
00:00:54,340 --> 00:00:59,770
Мы создадим великолепную атмосферу для нашего мира с двумя солнцaми, и вы увидите как с помошью

11
00:00:59,770 --> 00:01:02,680
настроек неба сделать так что бы оно выглядело так как вы хотите.

12
00:01:02,710 --> 00:01:09,070
Мы узнаем как добавить рельеф в наш открытый мир возводить холмы, поля и горы,

13
00:01:09,070 --> 00:01:12,880
А затем поймем как с помощью инструментов создавать биомы и среды.

14
00:01:12,880 --> 00:01:19,180
В процессе изображения пейзажей мы изучим редактор листвы и получим реалистичные ассеты mega scan

15
00:01:19,180 --> 00:01:23,980
от Quixel Bridge, с обширной библиотекой ассетов, уже имеющихся в движке.

16
00:01:23,980 --> 00:01:30,280
Мы добавим скалы, деревья, траву и растительность, чтобы создать красочный лес в середине 

17
00:01:30,280 --> 00:01:31,450
нашей открытой пустыни.

18
00:01:31,480 --> 00:01:36,580
После постройки мира я дам вам основы векторов и математики для видеоигр.

19
00:01:37,480 --> 00:01:43,580
В этой серии вы поймете, что же такое векторы, почему они важны для игрового процесса, а также примеры

20
00:01:43,590 --> 00:01:45,880
проблем в играх, которые можно решить с помощью них.

20
00:01:46,100 --> 00:01:51,580
Мы рассмотрим различные системы координат который использует Unreal Engine, а также действия с векторами, 

21
00:01:51,650 --> 00:01:54,100
Которые понадобятся на всех этапах вашей карьеры разработчика.

22
00:01:54,650 --> 00:01:58,780
После матиматической части курса, мы приступим к программированию на Unreal Engine 5.

23
00:01:58,980 --> 00:02:01,100
Перед этим рассмотрим основу C++.

24
00:02:01,200 --> 00:02:07,090
Так что если у вас есть хотя бы немного навыка программирования на C++ или другом аналогичном языке, то вы сможете очень скоро приступить к работе.

25
00:02:07,200 --> 00:02:14,880
Мы изучим структуру классов Unreal Engine, и приступим создавать наш первый класс С++ - базовый	 актер.

26
00:02:14,980 --> 00:02:18,450
Затем разберем функции, встроенные в его класс.

27
00:02:18,600 --> 00:02:27,450
Сначала мы попробуем эти функции в Blueprint,после чего перенесем в C++, что бы увидеть как они ведут себя в нем.

28	
00:02:28,050 --> 00:02:33,250
Я дам вам основу тригонометрических функций, одна из которых синусойда, и создам свои функции которые используют 

29	
00:02:33,260 --> 00:02:36,450
Синусойду, что бы актер зависал в воздухе.

30
00:02:36,720 --> 00:02:41,150
Здесь мы перейдем на другой уровень сложности, создавая класс.

31
00:02:42,860 --> 00:02:47,650
Мы поймем кем могут быть одержимы пешки и сделаем эту ворону пешкой, что бы мы могли летать

31
00:02:47,760 --> 00:02:50,050
По всему уровню, смотря на все. 

32
00:02:50,760 --> 00:02:56,250
Отсюда мы переместимся к классу персонажа, пользуясь Echo из Unreal Engine Valley - Anciet,

33
00:02:56,460 --> 00:03:01,250
Демо проекта, который перекочует в наш.

34
00:03:01,270 --> 00:03:05,150
И я представлю вам альтернативу Echo, если вам нужно использовать другого персонажа.

35
00:03:05,200 --> 00:03:11,250 
И конечно же, мы изучим основы анимаций персонажей, создавая анимации в Blueprint

36
00:03:11,300 --> 00:03:18,050
И как управлять поведением персонажа с использованием С++ и сделаем так что бы он мог доставать и прятать оруржие.

37
00:03:18,300 --> 00:03:24,950
Мы воспользуемся IK(обратной киниматекой) для положения ног, что бы ноги Echo выглядели

38
00:03:25,050 --> 00:03:26,980
естественно на склонах.

39
00:03:27,000 --> 00:03:33,580
Мы используем новые фнкции IK в Unreal Engine 5, что бы она естественно передвигалась.

40
00:03:33,640 --> 00:03:36,280
И я покажу вам как этого добиться.

41
00:03:36,340 --> 00:03:42,050	
Я покажу как не допустить выход из под контроля вашей анимации, связав несколько 

42
00:03:42,100 --> 00:03:47,450
анимаций в одином месте, тем самым организовав анимации по катерогиям .

43
00:03:47,550 --> 00:03:52,405
Мы и сами научимся создавать анимации, что бы реализовать атаку с помощью оружия.

44
00:03:52,470 --> 00:03:59,205
Я покажу вам как получить анимации из бесплатных источников и сделаем IK rigs для перенеаправлений анимаций 

44
00:03:59,220 --> 00:04:02,270
Из других скелетов в скелет Echo.

44
00:04:02,310 --> 00:04:05,530
Из за чего она может использовать любые анимации которые попадутся нам под руку.

45
00:04:05,594 --> 00:04:12,740
Мы научимся создавать интерфейсы, сохраняя наши классы не связаными, придерживаясь хорошего стиля кода.

46
00:04:12,750 --> 00:04:14,471
и сделаем код более гибким.

47
00:04:14,493 --> 00:04:21,550	
Мы сделаем интерфейс попадания, позволяющий придать функционал попадания по противнику любому актеру,

48
00:04:21,610 --> 00:04:22,970
например гошку или вазе.

49
00:04:23,040 --> 00:04:26,085
Не беспокойтесь, я расскажу вам что такое интерфейсы и как они работают.

50
00:04:26,160 --> 00:04:28,365
Я не расчитываю на то, что вы что то об этом знаете.

51
00:04:28,700 --> 00:04:34,950
Мы будем использовать физический движок Chaos для разрушения моделей объектов и создавать физические силы для разрушения этих объектов

52
00:04:34,950 --> 00:04:40,510
что бы в нашей игре были разрушаемые объекты с разной степенью разрушения.

53
00:04:40,810 --> 00:04:46,850
Мы сделаем так, что когда горшок разбивается, из нее выпадало сокровище и у нас будет стимул разбить больше горшков.

54
00:04:47,176 --> 00:04:53,800
Мы познакомимся с системой частиц Ниагарой и создадим свою Ниагару, что бы вокруг вещей с которыми можно взаимодействовать, кружили огоньки.

55
00:04:53,850 --> 00:04:056,140
Хорошо, после этого мы перейдем к боевке и создадим класс врага.

56
00:04:56,177 --> 00:05:00,105
Реализуем интерфейс попадания для противников, что бы во время удара они издавали звуки и выделяли всплески крови.

57
00:05:06,440 --> 00:05:11 ,130 
Мы воспользуемся ранее изученными математическими знаниями, что бы сделать направленные анимации удара.

58
00:05:11,400 --> 00:05:14,990
Я расскажу вам о более сложных векторных операциях, таких как:

59
00:05:15,260 --> 00:05:21,385
Перекрестные продукты, что бы мы могли бить по направлению камеры и воспользуемся корневой анимацией движения,

59
00:05:21,390 --> 00:05:25,500
Что бы противники пошатывались когда мы их бъем.

60
00:05:25,510 --> 00:05:29,750
Перейдем к ИИ, которое добавит поведение нашего врага.

61
00:05:29,775 --> 00:05:35,550
Мы поручим им патрулировать случайные точки на карте и дадим возможность обнаруживать пешки,

62
00:05:35,560 --> 00:05:40,380
Что бы враги видели нашего героя, когда он перед ними бегал.

63
00:05:40,400 --> 00:05:45,820
Противники будут настроены на вас враждебно: они будут преследовать вас, а если отбежите далеко, то потеряют интерес к вам.

64
00:05:45,845 --> 00:05:48,100
А когда они подойдут достаточно близко, они начнут бить вас.

65
00:05:48,210 --> 00:05:51,500
Я обучу вас правильному рефакторинга кода.

66
00:05:51,705 --> 00:05:59,650
Я научу вас приемам которые используют программисты, что бы наш код был доступным и легко читался

67
00:05:59,670 --> 00:06:04,715
И был ясным, лаконичным, простым в откладке - на это будет отдельный урок.

68
00:06:04,770 --> 00:06:10,985
Мы увидим как создать более сложное поведение с помощью хорошо структурированной кодовой базы, делая легким

69
00:06:11,010 --> 00:06:12,945
внедрение нового функционала.

70
00:06:13,250 --> 00:06:18,800
Затем сделаем наших врагов умнее, используя новую систему передвижения UE5.

71
00:06:18,843 --> 00:06:24,980
Мы дадим им возможность перемещаться во время боя, в зависимости от цели, от чего у врага будет больше шансов на победу.

72
00:06:25,010 --> 00:06:32,773
Если мы будем часто умирать, враги будут становиться сильней, и мы сможем настраивать сложность.

73
00:06:32,783 --> 00:06:39,210
Если нам требуется больше боссов в стиле Elden Ring с более умными врагами, то нам самим потребуется больше навыков.

74
00:06:39,247 --> 00:06:42,812
Мы дадим Eco возможность уклоняться от атак.

75
00:06:42,920 --> 00:06:49,480
Другая боевая механика будет похожая на Souls, который реализует птрибут нашего персонажа с атрибутом

76
00:06:49,500 --> 00:06:50,960
Который следит за здоровьем.

77
00:06:50,010 --> 00:06:56,760
Это общий класс ни к чму не привязанный, поэтому мы можем добавить его к нашему персонажу, 

78
00:06:56,810 --> 00:07:01,155
Так и ко врагу, что бы отслеживать здоровье и другие характеристики.

79
00:07:01,200 --> 00:07:07,290
Над врагом тоже будет появляться полоска здоровья, когда мы по нему бьем, и исчезает когда к нам пропадает интерес.

80
00:07:07,362 --> 00:07:12,893
Echo тоже получит свой индикатор здоровья, выносливости и счетчики золота и душ.

81
00:07:12,937 --> 00:07:18,010
Индикатор будет уменьшаться когда мы получаем удар. Выносливость будет расходуется, когда мы используем уклонение.

82
00:07:18,101 --> 00:07:20,580
Счетчик золота будет прибавляться когда мы подбираем сокровище.

83
00:07:20,642 --> 00:07:26,230
Создадим еще одну систему частиц Ниагара для душ и настроем ее так, что бы она выглядела

84
00:07:26,278 --> 00:07:27,832
так как мы хотим.

85
00:07:27,867 --> 00:07:34,726
Души будут появляться из убитых врагов. Это позволит получать очки опыта за убитых врагов.


86
00:07:34,837 --> 00:07:40,371
В итоге, созданные нами механики объединим в класс "enemy" и используем его для
создания нескольких новых противников.
